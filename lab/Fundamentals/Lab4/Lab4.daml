module Lab4 where
import Daml.Script
import DA.Math as Math
-- Problem Statement 1
-- Takes a score and returns its corresponding letter grade. It uses if-then-else.
getLetterGradeUsingIf: Decimal -> Text
getLetterGradeUsingIf score =
    if (score < 70.0) then "F"
    else
        if (score < 80.0) then "C"
        else
            if (score <90.0) then "B"
            else "A"
-- Takes a letter-grade and returns a range of score. It uses case-statements.
getScoreUsingCase: Text -> Text
getScoreUsingCase grade = case grade of
    "A"-> "90.0 or above"
    "B"-> "80.0 or above"
    "C"-> "70.0 or above"
    "F"-> "60.0 or above"
    _->"unknow"
-- Takes a score and returns its corresponding letter grade. It uses Guards.
getLetterGradeUsingGuards: Decimal -> Text
getLetterGradeUsingGuards grade
    |grade <70.0 = "F"
    |grade <80.0 = "C"
    |grade <90.0 = "B"
    |otherwise = "A"


-- Takes two scores and returns the letter-grade corresponding to their average. Uses Guards with 'where' to compute average.
getAverageGradeLetter: Decimal -> Decimal -> Text
getAverageGradeLetter grade1 grade2
    |average <70.0 = "F"
    |average <80.0 = "C"
    |average <90.0 = "B"
    |otherwise = "A"
    where average = (grade1+grade2)/2.0

testGrades: Script()
testGrades = script do 
    
    debug $ getLetterGradeUsingIf 90.0
    debug $ getLetterGradeUsingIf 85.0
    debug $ getLetterGradeUsingIf 75.0
    debug $ getLetterGradeUsingIf 65.00
    debug "----------"
    debug $ getScoreUsingCase "A"
    debug $ getScoreUsingCase "B"
    debug $ getScoreUsingCase "C"
    debug $ getScoreUsingCase "F"
    debug $ getScoreUsingCase "X"
    debug "----------"
    debug $ getLetterGradeUsingGuards 90.0
    debug $ getLetterGradeUsingGuards 80.0
    debug $ getLetterGradeUsingGuards 70.0
    debug $ getLetterGradeUsingGuards 60.0
    debug "----------"
    debug $ getAverageGradeLetter 75.0 83.0
    debug $ getAverageGradeLetter 95.0 83.0
    debug $ getAverageGradeLetter 98.0 83.0
    debug $ getAverageGradeLetter 60.0 70.0

    return()

-- Problem Statement 2

-- Write a function named triangleArea 
-- calculates the area of a triangle. 
-- It takes a list as an input that has the lengths of three sides of a triangle. 
-- It returns a value depending on the four scenarios given below:

-- Triangle area = âˆš ( s * (s-a) * (s-b) * (s-c) )  where s = (a + b + c)/2. 
calculateTriangleArea: [Decimal]->Decimal
calculateTriangleArea list = 
    let 
        s = sum list / 2.0 
    in Math.sqrt (foldl (\acc val -> acc * (s - val)) s list)

triangleArea:[Decimal]-> Either Text Decimal
triangleArea [a,b,c]
    | a + b <= c || a + c <= b || b + c <= a = Left "Error: This can't be a triangle as sum of any two sides must be greater than the third."
    | length [a,b,c] < 3 = Left "Error: Triangle must have three sides."
    | a <= 0.0 || b <= 0.0 || c <= 0.0 = Left "Error: Side of a triangle cannot be 0.0."
    | otherwise = Right (calculateTriangleArea [a,b,c])
triangleArea _ = Left "Error: Triangle must have three sides."

testTriangle:Script()
testTriangle = script do 
    -- 5.5
    -- 5.5 * (1.5*3.5*0.5)
    -- 5.5 * 
    debug $ triangleArea [4.0, 2.0, 5.0]
    debug $ triangleArea [1.0, 2.0, 3.0]
    debug $ triangleArea [1.0, 2.0]
    debug $ triangleArea [1.0, 2.0, 0.0]
    return ()